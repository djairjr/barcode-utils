#!/usr/bin/python
#
# ofono-mock - ofono dbus mock
#
# Copyright 2010 Canonical Ltd.
#
# Authors:
# Kalle Valo <kalle.valo@canonical.com>
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Description:
# This is a mock object faking being ofono running on dbus
# system bus and can be used to test UI. It fakes all the most important
# methods, properties and signals used by indicator-barcode.
#
# Usage:
# sudo stop ofono
# sudo ./ofono-mock
#

import dbus, dbus.service
import gobject
from dbus.mainloop.glib import DBusGMainLoop

# Use SimModem instead of this Modem!

class Modem(dbus.service.Object):

      def __init__(self, path):
            self.bus = dbus.SystemBus()
            self.bus_name = dbus.service.BusName("org.ofono", bus=self.bus)

            self.path = path
            dbus.service.Object.__init__(self, self.bus_name, path)

            self.properties = {}
            self.properties["PinRequired"] = "pin"

      def set_property(self, property, value):
            self.properties[property] = value

      @dbus.service.method("org.ofono.Modem", out_signature="a{sv}")
      def GetProperties(self):
            return { "Interfaces" : [ "org.ofono.SimManager" ] }

      @dbus.service.method("org.ofono.SimManager", in_signature="ss")
      def EnterPin(self, pin_type, pin):
            print pin_type, pin
            if pin_type != "pin" or pin != "4321":
                  raise dbus.DBusException("PIN failed")

            self.set_property("PinRequired", "")

# python doesn't handle two methods with same name, so we need to put 
# second method to subclass
#
# http://lists.freedesktop.org/archives/dbus/2007-November/008907.html

class SimModem(Modem):
      @dbus.service.method("org.ofono.SimManager", out_signature="a{sv}")
      def GetProperties(self):
            return self.properties

class OfonoManager(dbus.service.Object):
      __dbus_object_path__ = "/"

      def __init__(self):
            self.bus = dbus.SystemBus()
            self.bus_name = dbus.service.BusName("org.ofono", bus=self.bus)

            dbus.service.Object.__init__(self, self.bus_name,
                                         self.__dbus_object_path__)

            self.modems = {}
            self.modem_id = 0

      @dbus.service.method("org.ofono.Manager", out_signature="a(oa{sv})")
      def GetModems(self):
            result = [ ]

            for m in self.modems:
                  result.append((m, self.modems[m].properties))

            return result

      @dbus.service.method("com.canonical.ofono.mock.Manager",
                           in_signature="", out_signature="o")
      def CreateModem(self):
            path = "/modem" + str(self.modem_id)
            self.modem_id += 1

            self.modems[path] = SimModem(path)
            self.ModemAdded(path, self.modems[path].properties)

            return path

      @dbus.service.method("com.canonical.ofono.mock.Manager",
                           in_signature="o", out_signature="")
      def RemoveModem(self, path):
            if path not in self.modems:
                  return

            del self.modems[path]

      @dbus.service.signal("org.ofono.Manager", signature="oa{sv}")
      def ModemAdded(self, path, properties):
            pass

def main():
      DBusGMainLoop(set_as_default=True)
      loop = gobject.MainLoop()

      OfonoManager()

      loop.run()

if __name__ == "__main__":
    main()
      

