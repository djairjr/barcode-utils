/*
  Barman-1.0.vapi generated by vapigen, but modified manually by kvalo.
*/

[CCode (cprefix = "Barman", lower_case_cprefix = "barman_")]
namespace Barman {
	[CCode (cheader_filename = "barman-ipv4.h")]
	public class IPv4 : GLib.Object {
		[CCode (has_construct_function = false)]
		public IPv4 (Barman.IPv4Method method, string address, string netmask, string gateway) throws GLib.Error;
		public unowned string get_address ();
		public unowned string get_gateway ();
		public Barman.IPv4Method get_method ();
		public unowned string get_method_as_string ();
		public unowned string get_netmask ();
		[CCode (has_construct_function = false)]
		public IPv4.with_strings (string method, string address, string netmask, string gateway) throws GLib.Error;
		public string address { get; construct; }
		public string gateway { get; construct; }
		public uint method { get; construct; }
		public string netmask { get; construct; }
	}
       [CCode (cheader_filename = "barman-ipv6.h")]
       public class IPv6 : GLib.Object {
               [CCode (has_construct_function = false)]
               public IPv6 (Barman.IPv6Method method, string address, uint8 prefix_length, string gateway) throws GLib.Error;
               public unowned string get_address ();
               public unowned string get_gateway ();
               public Barman.IPv6Method get_method ();
               public unowned string get_method_as_string ();
               public uint8 get_prefix_length ();
               [CCode (has_construct_function = false)]
               public IPv6.with_strings (string method, string address, uint8 prefix_length, string gateway) throws GLib.Error;
               public string address { get; construct; }
               public string gateway { get; construct; }
               public uint method { get; construct; }
               public uint8 prefix_length { get; construct; }
       }
	[CCode (cheader_filename = "barman-manager.h")]
	public class Manager : GLib.Object {
		public weak GLib.Object parent;
		[CCode (has_construct_function = false)]
		public Manager ();
		public async void connect_service (Barman.ServiceType type, Barman.ServiceMode mode, Barman.ServiceSecurity security, [CCode (array_length = false)] uint8[] ssid, uint ssid_len, GLib.Cancellable? cancellable) throws GLib.Error;
        public async void disable_technology (Barman.TechnologyType type, GLib.Cancellable? cancellable) throws GLib.Error;
        public async void enable_technology (Barman.TechnologyType type, GLib.Cancellable? cancellable) throws GLib.Error;
		public Barman.Service get_default_service ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned Barman.Service[] get_services ();
		public unowned Barman.Service get_service (string path);
        public Barman.TechnologyState get_bluetooth_state ();
        public Barman.TechnologyState get_cellular_state ();
        public Barman.TechnologyState get_ethernet_state ();
        public Barman.TechnologyState get_wifi_state ();
        public bool get_offline_mode ();
        public void set_offline_mode (bool mode);
		public bool get_connected ();
		public bool connected { get; }
        public bool offline_mode { get; set; }
		public Barman.Service default_service { get; }
		public signal void service_added (Barman.Service object);
		public signal void service_removed (string object);
	}
	[CCode (cheader_filename = "barman-service.h")]
	public class Service : GLib.Object {
		public weak GLib.Object parent;
		[CCode (has_construct_function = false)]
		public Service (string path);
		public async void connect () throws GLib.Error;
		public async void disconnect () throws GLib.Error;
		public unowned string get_apn ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_domains ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_domains_configuration ();
		public bool get_autoconnect ();
		public unowned string get_error ();
		public bool get_favorite ();
		public bool get_immutable ();
		public unowned Barman.IPv4 get_ipv4 ();
		public unowned Barman.IPv4 get_ipv4_configuration ();
        public unowned Barman.IPv6 get_ipv6 ();
        public unowned Barman.IPv6 get_ipv6_configuration ();
		public bool get_login_required ();
		public unowned string get_mcc ();
		public unowned string get_mnc ();
		public unowned string get_name ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_nameservers ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_nameservers_configuration ();
		public unowned string get_passphrase ();
		public bool get_passphrase_required ();
		public unowned string get_path ();
		public bool get_roaming ();
		public Barman.ServiceSecurity get_security ();
		public Barman.ServiceType get_service_type ();
		public bool get_setup_required ();
		public Barman.ServiceState get_state ();
		public uint8 get_strength ();
		public bool is_ready ();
		public static unowned string mode2str (Barman.ServiceMode mode);
		public static unowned string security2str (Barman.ServiceSecurity security);
		public void set_apn (string apn);
		public void set_autoconnect (bool autoconnect);
		public void set_domains_configuration ([CCode (array_length = false, array_null_terminated = true)] string[] domains);
		public void set_ipv4_configuration (Barman.IPv4 ipv4);
        public void set_ipv6_configuration (Barman.IPv6 ipv6);
		public void set_nameservers_configuration ([CCode (array_length = false, array_null_terminated = true)] string[] nameservers);
		public void set_passphrase (string passphrase);
		public static unowned string state2str (Barman.ServiceState state);
		public static Barman.ServiceMode str2mode (string mode);
		public static Barman.ServiceSecurity str2security (string security);
		public static Barman.ServiceState str2state (string state);
		public static Barman.ServiceType str2type (string type);
		public static unowned string type2str (Barman.ServiceType type);
		public string apn { get; set; }
		public bool autoconnect { get; set; }
		public string[] domains { get; }
		public string[] domains_configuration { get; set; }
		public string error { get; }
		public bool favorite { get; }
		public bool immutable { get; }
		public Barman.IPv4 ipv4 { get; }
		public Barman.IPv4 ipv4_configuration { get; set; }
        public Barman.IPv6 ipv6 { get; }
        public Barman.IPv6 ipv6_configuration { get; set; }
		public bool login_required { get; }
		public string mcc { get; }
		public string mnc { get; }
		[NoAccessorMethod]
		public uint mode { get; }
		public string name { get; }
		public string[] nameservers { get; }
		public string[] nameservers_configuration { get; set; }
		public string passphrase { get; set; }
		public bool passphrase_required { get; }
		public string path { get; construct; }
		[NoAccessorMethod]
		public bool ready { get; }
		public bool roaming { get; }
		public uint security { get; }
		public bool setup_required { get; }
		public uint state { get; }
		public uint strength { get; }
		[NoAccessorMethod]
		public uint type { get; }
	}
	[CCode (cprefix = "BARMAN_IPV4_METHOD_", cheader_filename = "barman-service.h")]
	public enum IPv4Method {
		OFF,
		MANUAL,
		FIXED,
		DHCP
	}
       [CCode (cprefix = "BARMAN_IPV6_ERROR_INVALID_", cheader_filename = "barman-ipv6.h")]
       public enum IPv6Error {
               METHOD,
               SETTINGS
       }
       [CCode (cprefix = "BARMAN_IPV6_METHOD_", cheader_filename = "barman-ipv6.h")]
       public enum IPv6Method {
               OFF,
               MANUAL,
               FIXED,
               AUTO
       }
	[CCode (cprefix = "BARMAN_SERVICE_MODE_", cheader_filename = "barman-service.h")]
	public enum ServiceMode {
		MANAGED,
		ADHOC
	}
	[CCode (cprefix = "BARMAN_SERVICE_SECURITY_", cheader_filename = "barman-service.h")]
	public enum ServiceSecurity {
		NONE,
		WEP,
		PSK,
		IEEE8021X
	}
	[CCode (cprefix = "BARMAN_SERVICE_STATE_", cheader_filename = "barman-service.h")]
	public enum ServiceState {
		IDLE,
		FAILURE,
		ASSOCIATION,
		CONFIGURATION,
		READY,
		LOGIN,
		ONLINE,
		DISCONNECT
	}
	[CCode (cprefix = "BARMAN_SERVICE_TYPE_", cheader_filename = "barman-service.h")]
	public enum ServiceType {
		ETHERNET,
		WIFI,
		BLUETOOTH,
		CELLULAR
	}
    [CCode (cprefix = "BARMAN_TECHNOLOGY_STATE_", cheader_filename = "barman-service.h")]
    public enum TechnologyState {
        UNKNOWN,
        UNAVAILABLE,
        AVAILABLE,
        OFFLINE,
        ENABLED,
        CONNECTED
    }
    [CCode (cprefix = "BARMAN_TECHNOLOGY_TYPE_", cheader_filename = "barman-manager.h")]
    public enum TechnologyType {
        UNKNOWN,
        ETHERNET,
        WIFI,
        BLUETOOTH,
        CELLULAR
    }
	[CCode (cheader_filename = "barman-service.h")]
	public const string MANAGER_PATH;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PATH;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_DEFAULT_TECHNOLOGY;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_ENABLED_TECHNOLOGIES;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_ERROR;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_NAME;
	[CCode (cheader_filename = "barman-service.h")]
    public const string PROPERTY_OFFLINE_MODE;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_PASSPHRASE;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_SECURITY;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_SERVICES;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_SETUP_REQUIRED;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_STATE;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_STRENGTH;
	[CCode (cheader_filename = "barman-service.h")]
	public const string PROPERTY_TYPE;
	[CCode (cheader_filename = "barman-service.h")]
	public const string SECURITY_NONE;
	[CCode (cheader_filename = "barman-service.h")]
	public const string SECURITY_PSK;
	[CCode (cheader_filename = "barman-service.h")]
	public const string SECURITY_RSN;
	[CCode (cheader_filename = "barman-service.h")]
	public const string SECURITY_WEP;
	[CCode (cheader_filename = "barman-service.h")]
	public const string SECURITY_WPA;
	[CCode (cheader_filename = "barman-service.h")]
	public const string SERVICE_NAME;
	[CCode (cheader_filename = "barman-service.h")]
	public const string SIGNAL_PROPERTY_CHANGED;
	[CCode (cheader_filename = "barman-service.h")]
	public const string STATE_CONNECTING;
	[CCode (cheader_filename = "barman-service.h")]
	public const string STATE_OFFLINE;
	[CCode (cheader_filename = "barman-service.h")]
	public const string STATE_ONLINE;
	[CCode (cheader_filename = "barman-service.h")]
	public const string TECHNOLOGY_BLUETOOTH;
	[CCode (cheader_filename = "barman-service.h")]
	public const string TECHNOLOGY_CELLULAR;
	[CCode (cheader_filename = "barman-service.h")]
	public const string TECHNOLOGY_ETHERNET;
	[CCode (cheader_filename = "barman-service.h")]
       public const string TECHNOLOGY_WIFI;
}
